<!--
	SPDX-FileCopyrightText: 2023 dbus.freedesktop.org
	SPDX-License-Identifier: GPL-3.0-or-later
-->
<node>
 <interface name="org.freedesktop.login1.Manager">
  <method name="PowerOff">
   <arg type="b" name="interactive" direction="in"/>
  </method>
  <method name="PowerOffWithFlags">
   <arg type="t" name="flags" direction="in"/>
  </method>
  <method name="Reboot">
   <arg type="b" name="interactive" direction="in"/>
  </method>
  <method name="RebootWithFlags">
   <arg type="t" name="flags" direction="in"/>
  </method>
  <method name="Halt">
   <arg type="b" name="interactive" direction="in"/>
  </method>
  <method name="HaltWithFlags">
   <arg type="t" name="flags" direction="in"/>
  </method>
  <method name="Suspend">
   <arg type="b" name="interactive" direction="in"/>
  </method>
  <method name="SuspendWithFlags">
   <arg type="t" name="flags" direction="in"/>
  </method>
  <method name="Hibernate">
   <arg type="b" name="interactive" direction="in"/>
  </method>
  <method name="HibernateWithFlags">
   <arg type="t" name="flags" direction="in"/>
  </method>
  <method name="HybridSleep">
   <arg type="b" name="interactive" direction="in"/>
  </method>
  <method name="HybridSleepWithFlags">
   <arg type="t" name="flags" direction="in"/>
  </method>
  <method name="SuspendThenHibernate">
   <arg type="b" name="interactive" direction="in"/>
  </method>
  <method name="SuspendThenHibernateWithFlags">
   <arg type="t" name="flags" direction="in"/>
  </method>
  <method name="CanPowerOff">
   <arg type="s" name="result" direction="out"/>
  </method>
  <method name="CanReboot">
   <arg type="s" name="result" direction="out"/>
  </method>
  <method name="CanHalt">
   <arg type="s" name="result" direction="out"/>
  </method>
  <method name="CanSuspend">
   <arg type="s" name="result" direction="out"/>
  </method>
  <method name="CanHibernate">
   <arg type="s" name="result" direction="out"/>
  </method>
  <method name="CanHybridSleep">
   <arg type="s" name="result" direction="out"/>
  </method>
  <method name="CanSuspendThenHibernate">
   <arg type="s" name="result" direction="out"/>
  </method>
  <method name="ScheduleShutdown">
   <arg type="s" name="type" direction="in"/>
   <arg type="t" name="usec" direction="in"/>
  </method>
  <method name="CancelScheduledShutdown">
   <arg type="b" name="cancelled" direction="out"/>
  </method>
  <method name="CanRebootParameter">
   <arg type="s" name="result" direction="out"/>
  </method>
  <method name="SetRebootParameter">
   <arg type="s" name="parameter" direction="in"/>
  </method>
  <method name="CanRebootToFirmwareSetup">
   <arg type="s" name="result" direction="out"/>
  </method>
  <method name="SetRebootToFirmwareSetup">
   <arg type="b" name="enable" direction="in"/>
  </method>
  <method name="CanRebootToBootLoaderMenu">
   <arg type="s" name="result" direction="out"/>
  </method>
  <method name="SetRebootToBootLoaderMenu">
   <arg type="t" name="timeout" direction="in"/>
  </method>
  <method name="CanRebootToBootLoaderEntry">
   <arg type="s" name="result" direction="out"/>
  </method>
  <method name="SetRebootToBootLoaderEntry">
   <arg type="s" name="boot_loader_entry" direction="in"/>
  </method>
  <method name="SetWallMessage">
   <arg type="s" name="wall_message" direction="in"/>
   <arg type="b" name="enable" direction="in"/>
  </method>
  <signal name="PrepareForShutdown">
   <arg type="b" name="start"/>
  </signal>
  <signal name="PrepareForSleep">
   <arg type="b" name="start"/>
  </signal>
 </interface>
</node>
